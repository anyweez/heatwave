package com.lukesegars.heatwave;

import java.util.ArrayList;

import android.content.ContentValues;
import android.content.Context;
import android.util.Log;

public class Wave {
	// The number of seconds per unit entered in the UI.  The UI currently
	// asks users for wavelengths in days, which translates into 86400 seconds.
	public static final int SECONDS_PER_UNIT = 86400;
	
	public class Fields {
		private static final long DEFAULT_ID = -1;
		private static final int DEFAULT_WAVELENGTH = -1;
		private static final String DEFAULT_NAME = "";
		
		private long id = DEFAULT_ID;
		private String name = DEFAULT_NAME;
		private int waveLength = DEFAULT_WAVELENGTH;
		
		public boolean hasId() { return id != DEFAULT_ID; }
		public long getId() { return id; }
		public void setId(long i) { id = i; }
		
		public boolean hasName() { return name != DEFAULT_NAME; }
		public String getName() { return name; }
		public void setName(String n) { name = n; }
		
		public boolean hasWaveLength() { return waveLength != DEFAULT_WAVELENGTH; }
		public int getWavelength() { return waveLength; }
		public void setWavelength(int wl) { waveLength = wl; }
		
		protected void modify(Wave.Fields f) {
			if (f.hasId()) setId(f.getId());
			if (f.hasName()) setName(f.getName());
			if (f.hasWaveLength()) setWavelength(f.getWavelength());
		}
	}

	private static HeatwaveDatabase database;
	private static Context context = null;
	
	private Wave.Fields fields = new Wave.Fields();
	
	private static void initDb() {
		if (database == null) {
			database = HeatwaveDatabase.getInstance(context);
		}
	}

	public static void setContext(Context c) {
		context = c;
	}
	
	protected boolean hasName() { return fields.hasName(); }
	
	//////////////////////////////
	/// Static factory methods ///
	//////////////////////////////
	public static Wave create(String name, int wl) {
		initDb();

		// If the wave already exists, return an instance of that
		// object and do not create a new row in the database.
		Wave exists = database.loadWaveByName(name);
		if (exists != null) return exists;
		
		Wave w = new Wave();
		Wave.Fields wf = w.new Fields();
		
		wf.setName(name);
		wf.setWavelength(wl);

		w.modify(wf, false);
		long id = database.addWave(w);

		Wave.Fields wf2 = w.new Fields();
		wf2.setId(id);
		w.modify(wf2, false);
		
		return w;
	}
	
	public static Wave load(int id) {
		initDb();
		
		return database.fetchWave(id);
	}
	
	public static ArrayList<Wave> loadAll() {
		initDb();
		return database.fetchWaves();
	}
	
	public static Wave skeleton() { return new Wave(); }
	
	////////////////////////////
	/// Private constructors ///
	////////////////////////////
	
	private Wave() {
		fields = new Wave.Fields();
	}
	
	private Wave(Wave.Fields f) {
		fields = f;
	}
	
	//////////////////////
	/// Public methods ///
	//////////////////////
	public void modify(Wave.Fields f, boolean updateDb) {
		initDb();
		fields.modify(f);
		
		// Update the database records if requested (default = true).
		if (updateDb) database.updateWave(this);
	}
	
	public void modify(Wave.Fields f) {
		modify(f, true);
	}
	
	public long getId() {
		return fields.getId();
	}
	
	public String getName() {
		return fields.getName();
	}
	
	public int getWaveLength() {
		return fields.getWavelength();
	}
	
	public ContentValues cv() {
		ContentValues cv = new ContentValues();
		
		cv.put("name", fields.getName());
		cv.put("wavelength", fields.getWavelength());
		
		return cv;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + 
			((fields.getName() == null) ? 0 : fields.getName().hashCode());
		result = prime * result + fields.getWavelength();
		
		return result;
	}

	/**
	 * Automatically generated by Eclipse (woohoo!)
	 * 
	 * Checks to ensure that objects are valid and pointers to fields
	 * are valid before comparing values.  If the two waves have the
	 * same WAVE_LENGTH and NAME then they will be declared as "equal."
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;

		Wave other = (Wave) obj;
		
		// TODO: Not sure if this first condition is accurate...
		if (!fields.hasName() || !other.hasName()) return false;
		if (!getName().equals(other.getName())) return false;
		if (fields.getWavelength() != other.getWaveLength()) return false;
		
		return true;
	}

	@Override
	public String toString() {
		return "Wave '" + fields.getName() + 
			"', wavelength: " + String.valueOf(fields.getWavelength());
	}
}
